name: Test on Deploy

on:
  workflow_call:
    inputs:
      git-sha:
        required: false
        type: string
        default: ""
      deploy-env:
        required: true
        type: string
    secrets:
      OPENAI_API_KEY:
        required: true
  workflow_dispatch:

defaults:
  run:
    shell: bash

# UV will use the system python by default
env:
  UV_SYSTEM_PYTHON: 1

concurrency:
  group: test-${{ inputs.deploy-env }}
  cancel-in-progress: true

jobs:

  # Run our integration tests
  test:
    environment:
      name: ${{ inputs.deploy-env }}
      url: ${{ vars.ENV_URL }}
    name: Run integration tests
    runs-on: mdb-dev
    if: github.ref_type == 'branch'
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ inputs.git-sha }}
    - name: Set up Python
      uses: actions/setup-python@v5.1.0
      with:
        python-version: "3.10"
    # We have to install UV because (for now) these run in GH's runners
    - name: Setup uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "**/requirements*.txt"
        prune-cache: false
    - name: Install dependencies
      run: |
        uv pip install . .[lightwood] .[huggingface] -r requirements/requirements-test.txt
        uv pip freeze

    # - name: Run integration api and flow tests
    #   run: |

    #     if [ "$RUNNER_OS" == "Linux" ]; then

    #       pytest -vx tests/integration_tests/flows/test_ml_task_queue.py

    #       # MySQL API
    #       echo -e "\n===============test MySQL API===============\n"
    #       pytest -vx tests/integration_tests/flows/test_mysql_api.py
          
    #       # MySQL binary API
    #       echo -e "\n===============test MySQL binary API===============\n"
    #       pytest -vx -k 'not TestMySqlApi' tests/integration_tests/flows/test_mysql_bin_api.py

    #       # echo -e "\n===============TS predictions===============\n"
    #       pytest -svx tests/integration_tests/flows/test_ts_predictions.py

    #       # HTTP
    #       echo -e "\n===============test HTTP===============\n"
    #       pytest -vx tests/integration_tests/flows/test_http.py

    #       # Company independent
    #       echo -e "\n===============test company independent===============\n"
    #       pytest -vx tests/integration_tests/flows/test_company_independent.py
    #     fi
    #   env:
    #     PROMETHEUS_MULTIPROC_DIR: ./prometheus_metrics
    #     OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    - name: Run Learning Hub Tests
      run: |
          # Currently requires a DB to be running. New testing system is being set up
          # echo -e "\n===============MySQL Handler===============\n"
          # pytest -svx mindsdb/integrations/handlers/mysql_handler/

          # Currently requires a DB to be running. New testing system is being set up
          # echo -e "\n===============PostgreSQL Handler===============\n"
          # pytest -svx mindsdb/integrations/handlers/postgres_handler/

          # echo -e "\n===============MariaDB Handler===============\n"
          # pytest -svx tests/handler_tests/test_mariadb_handler.py

          # echo -e "\n===============File Handler===============\n"
          # pytest -svx mindsdb/integrations/handlers/file_handler/

          echo -e "\n===============Home Rental Home Prices===============\n"
          pytest -vx tests/integration_tests/tutorials/test_home_rental_prices_tutorial.py

          echo -e "\n===============Forecast Quaterly House Sales===============\n"
          pytest -vx tests/integration_tests/tutorials/test_forecast_quaterly_house_tutorial.py

          echo -e "\n===============Predict Text Sentiment Wih Huggingface===============\n"
          pytest -vx tests/integration_tests/tutorials/test_predict_text_sentiment_huggingface_tutorial.py

          echo -e "\n===============Predict Text Sentiment Wih OpenAI===============\n"
          pytest -vx tests/integration_tests/tutorials/test_predict_text_sentiment_openai_tutorial.py
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        INTERNAL_URL: ${{ vars.INTERNAL_URL }}
    